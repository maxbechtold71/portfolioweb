{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my Website! This is my official website. I originally created this for my final assignment in WRIT 4662W, but I will continue to expand on it throughout my college career. This was created using MkDocs and GitHub Pages, and every file was written in Markdown language. Feel free to read more about how I created the website in the documentation section! About Me My name is Max Bechtold, and I am a sophomore at the University of Minnesota. I am pursuing two degrees: A BS in Technical Writing and Communication and a BA in Philosophy. I am also pursuing a minor in Computer Science. I work as a barista at Rustica Bakery in Minneapolis and as a writing consultant at the University of Minnesota Center for Writing. In my free time I enjoy reading, taking long walks, and working on campaigns and projects for my favorite game: Dungeons & Dragons! I also enjoy reading about politics and history, so I am a pretty big nerd overall. After I graduate college, I hope to join the technical communication field as a technical writer, editor, or instructional designer. I think it would be fun to work with IT-related content and help people learn new things about computers, especially if I were to help design the instructions and guides. Regardless of the content area, I have always been passionate about teaching people and explaining things, and I hope to put those passions to good use in the future. Contact Me If you would like to contact me, you can reach me here: email: becht114@umn.edu LinkedIn: Max Bechtold","title":"Home"},{"location":"#welcome-to-my-website","text":"This is my official website. I originally created this for my final assignment in WRIT 4662W, but I will continue to expand on it throughout my college career. This was created using MkDocs and GitHub Pages, and every file was written in Markdown language. Feel free to read more about how I created the website in the documentation section!","title":"Welcome to my Website!"},{"location":"#about-me","text":"My name is Max Bechtold, and I am a sophomore at the University of Minnesota. I am pursuing two degrees: A BS in Technical Writing and Communication and a BA in Philosophy. I am also pursuing a minor in Computer Science. I work as a barista at Rustica Bakery in Minneapolis and as a writing consultant at the University of Minnesota Center for Writing. In my free time I enjoy reading, taking long walks, and working on campaigns and projects for my favorite game: Dungeons & Dragons! I also enjoy reading about politics and history, so I am a pretty big nerd overall. After I graduate college, I hope to join the technical communication field as a technical writer, editor, or instructional designer. I think it would be fun to work with IT-related content and help people learn new things about computers, especially if I were to help design the instructions and guides. Regardless of the content area, I have always been passionate about teaching people and explaining things, and I hope to put those passions to good use in the future.","title":"About Me"},{"location":"#contact-me","text":"If you would like to contact me, you can reach me here: email: becht114@umn.edu LinkedIn: Max Bechtold","title":"Contact Me"},{"location":"deliv1/","text":"My Projects Throughout my college career, I've created and worked on many difficult tasks which involved combining technical skills with complex theories. While most of what I feature here relates to school, I had a lot of fun with them and I enjoyed creating them! Writing Samples I have had many writing projects, which you can find in this Google Drive folder . These projects include an SOP, a philosophy paper, and a PDF version of my D&D character creation tutorial. All of these writing samples engage with complex and/or technical topics, and they are some of the best examples of my writing. D&D Character Creation Tutorial with DITA In WRIT 4662W, I worked on a structured authoring project using DITA. I did not directly code a website in this project; rather, I used the Oxygen software to organize DITA files and transform them into various forms of documentation. I sought to make some documentation about creating a D&D character, with the idea that it would be part of a larger documentation, such as a player handbook or other tutorial-related material. After I made the separate DITA files and added content to them, I could use Oxygen to transform the DITA files into multiple forms. One of these forms was a website, and the other was a PDF. Here is a link to my DITA website: DITA website .","title":"My Projects"},{"location":"deliv1/#my-projects","text":"Throughout my college career, I've created and worked on many difficult tasks which involved combining technical skills with complex theories. While most of what I feature here relates to school, I had a lot of fun with them and I enjoyed creating them!","title":"My Projects"},{"location":"deliv1/#writing-samples","text":"I have had many writing projects, which you can find in this Google Drive folder . These projects include an SOP, a philosophy paper, and a PDF version of my D&D character creation tutorial. All of these writing samples engage with complex and/or technical topics, and they are some of the best examples of my writing.","title":"Writing Samples"},{"location":"deliv1/#dd-character-creation-tutorial-with-dita","text":"In WRIT 4662W, I worked on a structured authoring project using DITA. I did not directly code a website in this project; rather, I used the Oxygen software to organize DITA files and transform them into various forms of documentation. I sought to make some documentation about creating a D&D character, with the idea that it would be part of a larger documentation, such as a player handbook or other tutorial-related material. After I made the separate DITA files and added content to them, I could use Oxygen to transform the DITA files into multiple forms. One of these forms was a website, and the other was a PDF. Here is a link to my DITA website: DITA website .","title":"D&amp;D Character Creation Tutorial with DITA"},{"location":"max/","text":"Website Documentation I built this website in WRIT 4662W using MkDocs and Markdown. With the help of my professor, Daniel Card, I got it fully functional and hosted on GitHub pages. Process Overview The most difficult part of making this website for me was setting up MkDocs and Python. While these are both open source and free, it took some work to make them fully functional. We used the MkDocs documentation to help us work through the process, and we also had to use the command line to build our MkDocs site. After setting up MkDocs, we could freely create and host websites, but only for brief periods of time. To fully host our websites, we had to use GitHub pages. We used the command line to build our MkDocs website, and then pushed the changes to GitHub and published them using GitHub pages. The end result was a hosted website that we could quickly modify on our computer and that was public to everyone. 1. Installing MkDocs and Python First, we installed Python. Python allowed us to use MkDocs to build a site, so having one but not the other was no help. To do this, we retrieved the latest version from the Python website . Next, we had to install pip. Using the command line, we simply entered: python get-pip.py After that, we installed mkdocs by entering: pip install mkdocs 2. Building the Website After getting the initial steps set up, we could start making Markdown files in our project and editing them. Of course, we had to organize these files so that MkDocs would use them when building the website. To do this, we made a large folder: my-mkdocs . This contained: A folder docs for Markdown files. A folder site for the build website. A file mkdocs.yml which contained the information for organizing the site. After editing the initial Markdown files like index.md and about.md , we could make our first build of the site. To build the website, we had to enter the command line interface once again. There were three steps to building the site. Enter cd desktop to go to the desktop files. Enter cd my-mkdocs to enter the MkDocs files. Enter mkdocs build to build the website, which is stored in the site folder. To view the website, there were three more steps to take. Enter mkdocs serve to host the website. Copy the link that the command line gives to you. Paste the link in a browser URL. This allowed us to temporarily view the website, but it would stop hosting as soon as we exited the command line. This meant that we had to use a more efficient way of hosting the website: GitHub Pages. 3. Using GitHub Pages Setting up GitHub Pages meant we could now freely host the website and make changes a lot more quickly and efficiently. We followed a few steps to link our website to GitHub Pages. Install GitHub desktop. Make a new local repository. Use the name \"site\" to link with our site file. Use the main and root branches. Keep the repository public. After creating the repository, we could now keep track of any changes we made by building the site folder. First, we had to host the site. We enterd GitHub broswer to publish the first commit of the website and keep it public. When we changed the folder by using mkdocs build in the command line, we could now follow a couple more steps to change the website. Enter GitHub desktop. Select the current project (site). Look over changes. Add a summary of changes. Select \"Commit to main\". Select \"Push to origin\". After pushing the changes to origin, we could now enter GitHub browser mode to view the latest deployment of the website. Overall, this was a very long process, but it was rewarding to get to see our website hosted and successful after the long time it took to set up! In the end, it made me more aware of how much technical communication exists within software instructions and tutorials, which made me excited to start creating my own documentation.","title":"Documentation"},{"location":"max/#website-documentation","text":"I built this website in WRIT 4662W using MkDocs and Markdown. With the help of my professor, Daniel Card, I got it fully functional and hosted on GitHub pages.","title":"Website Documentation"},{"location":"max/#process-overview","text":"The most difficult part of making this website for me was setting up MkDocs and Python. While these are both open source and free, it took some work to make them fully functional. We used the MkDocs documentation to help us work through the process, and we also had to use the command line to build our MkDocs site. After setting up MkDocs, we could freely create and host websites, but only for brief periods of time. To fully host our websites, we had to use GitHub pages. We used the command line to build our MkDocs website, and then pushed the changes to GitHub and published them using GitHub pages. The end result was a hosted website that we could quickly modify on our computer and that was public to everyone.","title":"Process Overview"},{"location":"max/#1-installing-mkdocs-and-python","text":"First, we installed Python. Python allowed us to use MkDocs to build a site, so having one but not the other was no help. To do this, we retrieved the latest version from the Python website . Next, we had to install pip. Using the command line, we simply entered: python get-pip.py After that, we installed mkdocs by entering: pip install mkdocs","title":"1. Installing MkDocs and Python"},{"location":"max/#2-building-the-website","text":"After getting the initial steps set up, we could start making Markdown files in our project and editing them. Of course, we had to organize these files so that MkDocs would use them when building the website. To do this, we made a large folder: my-mkdocs . This contained: A folder docs for Markdown files. A folder site for the build website. A file mkdocs.yml which contained the information for organizing the site. After editing the initial Markdown files like index.md and about.md , we could make our first build of the site. To build the website, we had to enter the command line interface once again. There were three steps to building the site. Enter cd desktop to go to the desktop files. Enter cd my-mkdocs to enter the MkDocs files. Enter mkdocs build to build the website, which is stored in the site folder. To view the website, there were three more steps to take. Enter mkdocs serve to host the website. Copy the link that the command line gives to you. Paste the link in a browser URL. This allowed us to temporarily view the website, but it would stop hosting as soon as we exited the command line. This meant that we had to use a more efficient way of hosting the website: GitHub Pages.","title":"2. Building the Website"},{"location":"max/#3-using-github-pages","text":"Setting up GitHub Pages meant we could now freely host the website and make changes a lot more quickly and efficiently. We followed a few steps to link our website to GitHub Pages. Install GitHub desktop. Make a new local repository. Use the name \"site\" to link with our site file. Use the main and root branches. Keep the repository public. After creating the repository, we could now keep track of any changes we made by building the site folder. First, we had to host the site. We enterd GitHub broswer to publish the first commit of the website and keep it public. When we changed the folder by using mkdocs build in the command line, we could now follow a couple more steps to change the website. Enter GitHub desktop. Select the current project (site). Look over changes. Add a summary of changes. Select \"Commit to main\". Select \"Push to origin\". After pushing the changes to origin, we could now enter GitHub browser mode to view the latest deployment of the website. Overall, this was a very long process, but it was rewarding to get to see our website hosted and successful after the long time it took to set up! In the end, it made me more aware of how much technical communication exists within software instructions and tutorials, which made me excited to start creating my own documentation.","title":"3. Using GitHub Pages"}]}